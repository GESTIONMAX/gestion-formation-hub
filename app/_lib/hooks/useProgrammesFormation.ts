"use client";

import { useState, useEffect } from "react";
import { useToast } from ".//use-toast";
import api from "@/services/api";
import { ApiError, ApiResponse } from "@/types";
import { ProgrammeFormation } from "@/types/programme";

// Note: L'interface ProgrammeFormation est maintenant import√©e depuis @/types/programme

/**
 * @description Hook personnalis√© pour g√©rer les programmes de formation (CRUD)
 * @note Composant client - N√©cessite la directive "use client" et utilise les API navigateur
 *
 * @returns {Object} Fonctions et √©tats pour manipuler les programmes de formation
 * @returns {ProgrammeFormation[]} programmes - Liste des programmes de formation
 * @returns {boolean} loading - Indicateur de chargement
 * @returns {Function} createProgramme - Cr√©ation d'un nouveau programme
 * @returns {Function} updateProgramme - Mise √† jour d'un programme
 * @returns {Function} deleteProgramme - Suppression d'un programme
 * @returns {Function} duplicateProgramme - Duplication d'un programme (ex: catalogue vers sur-mesure)
 * @returns {Function} updateProgrammeStatus - Mise √† jour du statut (actif/inactif)
 * @returns {Function} getProgrammesByCategorie - Filtrage par cat√©gorie
 * @returns {Function} getProgrammesByType - Filtrage par type (catalogue/sur-mesure)
 * @returns {Function} refreshProgrammes - Rechargement des programmes
 */
/**
 * @description Hook de gestion des programmes de formation
 * 
 * Ce hook fournit toutes les fonctionnalit√©s n√©cessaires pour interagir avec les programmes
 * de formation. Il encapsule les op√©rations CRUD (Create, Read, Update, Delete), la recherche,
 * le filtrage et la gestion des statuts des programmes.
 *
 * @returns {Object} Objet contenant les √©tats et fonctions pour g√©rer les programmes de formation
 * @returns {ProgrammeFormation[]} programmes - Liste des programmes de formation
 * @returns {boolean} loading - √âtat de chargement des programmes
 * @returns {ProgrammeFormation["categorie"][]} categories - Liste des cat√©gories de programmes
 * @returns {boolean} loadingCategories - √âtat de chargement des cat√©gories
 * @returns {Function} fetchProgrammes - Fonction pour charger les programmes
 * @returns {Function} createProgramme - Fonction pour cr√©er un programme
 * @returns {Function} updateProgramme - Fonction pour mettre √† jour un programme
 * @returns {Function} deleteProgramme - Fonction pour supprimer un programme
 * @returns {Function} duplicateProgramme - Fonction pour dupliquer un programme
 * @returns {Function} updateProgrammeStatus - Fonction pour mettre √† jour le statut d'un programme
 * @returns {Function} getProgrammesByCategorie - Fonction pour filtrer les programmes par cat√©gorie
 * @returns {Function} getProgrammesByType - Fonction pour filtrer les programmes par type
 * 
 * @example
 * // Utilisation dans un composant
 * const {
 *   programmes,
 *   loading,
 *   createProgramme,
 *   updateProgramme,
 *   deleteProgramme
 * } = useProgrammesFormation();
 * 
 * // Afficher la liste des programmes
 * return (
 *   <div>
 *     {loading ? (
 *       <p>Chargement...</p>
 *     ) : (
 *       <ul>
 *         {programmes.map(prog => (
 *           <li key={prog.id}>{prog.titre}</li>
 *         ))}
 *       </ul>
 *     )}
 *   </div>
 * );
 */
export const useProgrammesFormation = () => {
  /**
   * @description √âtat stockant la liste des programmes de formation
   */
  const [programmes, setProgrammes] = useState<ProgrammeFormation[]>([]);
  
  /**
   * @description √âtat de chargement g√©n√©ral des programmes
   */
  const [loading, setLoading] = useState(true);
  
  /**
   * @description Hook de notification pour afficher des alertes utilisateur
   */
  const { toast } = useToast();

  // Donn√©es simul√©es pour d√©monstration quand l'API n'est pas disponible
  const MOCK_PROGRAMMES: ProgrammeFormation[] = [
    {
      id: "1",
      code: "DEV-WEB-01",
      type: "catalogue",
      titre: "D√©veloppement Web Front-End",
      description: "Formation compl√®te sur les technologies front-end modernes incluant HTML5, CSS3 et JavaScript.",
      niveau: "D√©butant",
      participants: "8 √† 12 personnes",
      duree: "35 heures",
      prix: "1950‚Ç¨ HT",
      objectifs: [
        "Ma√Ætriser les fondamentaux du d√©veloppement web",
        "Cr√©er des interfaces utilisateur modernes et responsives",
        "Comprendre et utiliser JavaScript et ses frameworks"
      ],
      prerequis: "Connaissances de base en informatique",
      modalites: "Formation en pr√©sentiel ou √† distance",
      pictogramme: "üíª",
      estActif: true,
      contenuDetailleHtml: "<h2>Module 1: Introduction au HTML5</h2><p>Structure, balises s√©mantiques, formulaires avanc√©s</p>",
      publicConcerne: "Tout public souhaitant se former au d√©veloppement web",
      contenuDetailleJours: "Jour 1: HTML5, Jour 2: CSS3, Jour 3: JavaScript, Jour 4-5: Projets",
      modalitesAcces: "Inscription en ligne ou par t√©l√©phone",
      modalitesTechniques: "Ordinateur avec connexion internet, environnement de d√©veloppement",
      modalitesReglement: "Paiement par virement bancaire ou CB",
      formateur: "Experts en d√©veloppement web avec +5 ans d'exp√©rience",
      ressourcesDisposition: "Support de cours, exercices pratiques, acc√®s √† une plateforme en ligne",
      modalitesEvaluation: "QCM et projet pratique",
      sanctionFormation: "Attestation de fin de formation",
      niveauCertification: "N/A",
      delaiAcceptation: "15 jours avant le d√©but de la formation",
      accessibiliteHandicap: "Locaux accessibles aux personnes √† mobilit√© r√©duite",
      cessationAbandon: "Remboursement au prorata des heures suivies",
      beneficiaireId: null,
      objectifsSpecifiques: null,
      positionnementRequestId: null,
      programmeUrl: "https://www.example.com/programmes/dev-web-01",
      programme: "<h1>Programme d√©taill√©</h1><p>Formation d√©veloppement web compl√®te</p>",
      categorie: {
        id: "1",
        code: "DEV",
        titre: "D√©veloppement informatique",
        description: "Formations en d√©veloppement informatique",
      },
      categorieId: "1",
      createdAt: new Date('2023-05-10'),
      updatedAt: new Date('2023-09-18')
    },
    {
      id: "2",
      code: "DATA-SCIENCE-01",
      type: "catalogue",
      titre: "Introduction √† la Data Science",
      description: "D√©couvrez les fondamentaux de la data science et apprenez √† manipuler et analyser des donn√©es.",
      niveau: "Interm√©diaire",
      participants: "6 √† 10 personnes",
      duree: "21 heures",
      prix: "1450‚Ç¨ HT",
      objectifs: [
        "Comprendre les concepts de base de la data science",
        "Manipuler et nettoyer des jeux de donn√©es",
        "Cr√©er des visualisations pertinentes",
        "S'initier au machine learning"
      ],
      prerequis: "Connaissances en programmation et statistiques de base",
      modalites: "Formation en pr√©sentiel ou √† distance",
      pictogramme: "üìä",
      estActif: true,
      contenuDetailleHtml: "<h2>Module 1: Introduction √† Python pour la Data Science</h2><p>Pandas, NumPy, visualisation avec Matplotlib</p>",
      publicConcerne: "Analystes, d√©veloppeurs et professionnels de l'informatique",
      contenuDetailleJours: "Jour 1: Python et librairies, Jour 2: Analyse de donn√©es, Jour 3: Machine Learning",
      modalitesAcces: "Inscription via le site web",
      modalitesTechniques: "Ordinateur avec Python install√©, acc√®s √† Google Colab",
      modalitesReglement: "Paiement √† l'inscription",
      formateur: "Data Scientists exp√©riment√©s",
      ressourcesDisposition: "Notebooks Jupyter, datasets, documentation",
      modalitesEvaluation: "Projet d'analyse de donn√©es r√©el",
      sanctionFormation: "Attestation de comp√©tences",
      niveauCertification: "N/A",
      delaiAcceptation: "10 jours avant le d√©but",
      accessibiliteHandicap: "Formation adaptable selon les besoins",
      cessationAbandon: "Remboursement si annulation 7 jours avant",
      beneficiaireId: null,
      objectifsSpecifiques: null,
      positionnementRequestId: null,
      programmeUrl: "https://www.example.com/programmes/data-science-01",
      programme: "<h1>Programme Data Science</h1><p>Formation aux fondamentaux de la data science</p>",
      categorie: {
        id: "2",
        code: "DATA",
        titre: "Data Science & IA",
        description: "Formations en science des donn√©es et intelligence artificielle",
      },
      categorieId: "2",
      createdAt: new Date('2023-06-15'),
      updatedAt: new Date('2023-10-05')
    },
    {
      id: "3",
      code: "SM-DEVOPS-01",
      type: "sur-mesure",
      titre: "DevOps pour entreprise",
      description: "Formation sur mesure adapt√©e aux besoins sp√©cifiques de votre entreprise en mati√®re de DevOps.",
      niveau: "Avanc√©",
      participants: "4 √† 8 personnes",
      duree: "28 heures",
      prix: "Sur devis",
      objectifs: [
        "Mettre en place une cha√Æne CI/CD adapt√©e √† votre environnement",
        "Ma√Ætriser les outils DevOps sp√©cifiques √† votre infrastructure",
        "Optimiser les processus de d√©ploiement"
      ],
      prerequis: "Exp√©rience en administration syst√®me et d√©veloppement",
      modalites: "Formation en intra-entreprise",
      pictogramme: "üîÑ",
      estActif: false,
      contenuDetailleHtml: "<h2>Module 1: CI/CD avec GitLab</h2><p>Configuration, pipelines, automatisation</p>",
      publicConcerne: "√âquipes techniques de l'entreprise",
      contenuDetailleJours: "Jour 1-2: CI/CD, Jour 3: Conteneurs, Jour 4: Monitoring",
      modalitesAcces: "Formation r√©serv√©e aux collaborateurs de l'entreprise",
      modalitesTechniques: "Environnement technique de l'entreprise",
      modalitesReglement: "Facturation apr√®s la formation",
      formateur: "Expert DevOps s√©nior",
      ressourcesDisposition: "Documentation technique, scripts, exercices pratiques",
      modalitesEvaluation: "Mise en situation r√©elle",
      sanctionFormation: "Attestation de comp√©tences DevOps",
      niveauCertification: "N/A",
      delaiAcceptation: "30 jours avant le d√©but",
      accessibiliteHandicap: "Adaptable selon les besoins sp√©cifiques",
      cessationAbandon: "Voir conditions contractuelles",
      beneficiaireId: "client-123",
      objectifsSpecifiques: "R√©duire le temps de d√©ploiement de 75% sur les applications critiques",
      positionnementRequestId: "pos-456",
      programmeUrl: "https://www.example.com/programmes/sm-devops-01",
      programme: "<h1>Programme DevOps Personnalis√©</h1><p>Formation adapt√©e aux besoins de l'entreprise</p>",
      categorie: {
        id: "3",
        code: "DEVOPS",
        titre: "DevOps & Cloud",
        description: "Formations en DevOps et technologies cloud",
      },
      categorieId: "3",
      createdAt: new Date('2023-09-01'),
      updatedAt: new Date('2023-11-20')
    }
  ];

  /**
   * @description Charge la liste compl√®te des programmes de formation depuis l'API
   * @note Cette fonction est appel√©e automatiquement au montage du composant et met √† jour l'√©tat local
   * 
   * @returns {Promise<void>}
   * @throws {Error} Capture les erreurs en interne mais ne les propage pas
   * 
   * @example
   * // Rafra√Æchir manuellement la liste des programmes
   * await fetchProgrammes();
   * console.log(`${programmes.length} programmes charg√©s`);
   */
  const fetchProgrammes = async () => {
    try {
      setLoading(true);
      console.log('Chargement des programmes de formation...');
      const response = await api.get('/api/programmes-formation');
      console.log('Programmes charg√©s:', response.data.length, 'items');
      setProgrammes(response.data);
    } catch (error) {
      console.error('Erreur lors du chargement des programmes:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de charger les programmes de formation',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProgrammes();
  }, []);

  /**
   * @description Cr√©e un nouveau programme de formation
   * 
   * @param {Omit<ProgrammeFormation, 'id' | 'createdAt' | 'updatedAt'>} programmeData - Donn√©es du programme sans id et dates automatiques
   * @returns {Promise<ProgrammeFormation>} Le programme cr√©√©
   * @throws {Error} Si la cr√©ation √©choue
   * 
   * @example
   * // Cr√©er un nouveau programme de formation
   * const nouveauProgramme = await createProgramme({
   *   code: "DEV-WEB-02",
   *   titre: "D√©veloppement Web Full-Stack",
   *   type: "catalogue",
   *   // autres propri√©t√©s obligatoires...
   * });
   */
  const createProgramme = async (programmeData: Omit<ProgrammeFormation, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      console.log('Cr√©ation d\'un nouveau programme avec les donn√©es:', programmeData);
      const response = await api.post('/api/programmes-formation', programmeData);
      console.log('Programme cr√©√© avec succ√®s:', response.data);
      
      const newProgramme = response.data;
      setProgrammes(prev => [newProgramme, ...prev]);
      
      toast({
        title: 'Programme cr√©√©',
        description: `Programme "${newProgramme.titre}" cr√©√© avec succ√®s`,
      });
      
      return newProgramme;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du programme:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de cr√©er le programme',
        variant: 'destructive',
      });
      throw error;
    }
  };

  /**
   * @description Met √† jour un programme de formation existant
   * 
   * @param {string} id - Identifiant du programme √† mettre √† jour
   * @param {Partial<ProgrammeFormation>} programmeData - Donn√©es partielles √† mettre √† jour
   * @returns {Promise<ProgrammeFormation>} Le programme mis √† jour
   * @throws {Error} Si la mise √† jour √©choue
   * 
   * @example
   * // Mettre √† jour un programme existant
   * const programmeModifie = await updateProgramme("prog-123", {
   *   titre: "Nouveau titre",
   *   description: "Nouvelle description"
   * });
   */
  const updateProgramme = async (id: string, programmeData: Partial<ProgrammeFormation>) => {
    try {
      console.log('Mise √† jour du programme', id, 'avec les donn√©es:', programmeData);
      const response = await api.put(`/api/programmes-formation/${id}`, programmeData);
      const updatedProgramme = response.data;
      setProgrammes(prev => prev.map(p => (p.id === id ? updatedProgramme : p)));
      toast({
        title: 'Programme mis √† jour',
        description: `Programme "${updatedProgramme.titre}" mis √† jour avec succ√®s`,
      });
      return updatedProgramme;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de mettre √† jour le programme',
        variant: 'destructive',
      });
      throw error;
    }
  };

  /**
   * @description Supprime un programme de formation
   * 
   * @param {string} id - Identifiant du programme √† supprimer
   * @returns {Promise<void>}
   * @throws {Error} Si la suppression √©choue
   * 
   * @example
   * // Supprimer un programme
   * await deleteProgramme("prog-123");
   * console.log("Programme supprim√©");
   */
  const deleteProgramme = async (id: string) => {
    try {
      // Trouver le programme pour l'inclure dans la notification
      const programmeToDelete = programmes.find(p => p.id === id);
      console.log('Suppression du programme:', id, programmeToDelete?.titre);
      await api.delete(`/api/programmes-formation/${id}`);
      setProgrammes(prev => prev.filter(p => p.id !== id));
      toast({
        title: 'Programme supprim√©',
        description: programmeToDelete
          ? `Programme "${programmeToDelete.titre}" supprim√©`
          : 'Programme supprim√© avec succ√®s',
      });
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de supprimer le programme',
        variant: 'destructive',
      });
      throw error;
    }
  };

  /**
   * @description √âtat pour les cat√©gories de programmes de formation disponibles
   */
  const [categories, setCategories] = useState<ProgrammeFormation["categorie"][]>([]);
  
  /**
   * @description √âtat de chargement des cat√©gories
   */
  const [loadingCategories, setLoadingCategories] = useState(false);

  /**
   * @description Charge les cat√©gories de programmes depuis l'API
   * @returns {Promise<void>}
   * @throws {Error} Capture les erreurs en interne mais ne les propage pas
   * 
   * @example
   * // Recharger manuellement les cat√©gories
   * await fetchCategories();
   * console.log("Cat√©gories recharg√©es");
   */
  const fetchCategories = async () => {
    try {
      setLoadingCategories(true);
      console.log('Chargement des cat√©gories de programmes...');
      const response = await api.get('/api/categories-programme');
      setCategories(response.data);
      console.log('Cat√©gories charg√©es avec succ√®s:', response.data);
    } catch (error) {
      console.error('Erreur lors du chargement des cat√©gories:', error);
    } finally {
      setLoadingCategories(false);
    }
  };

  // Charger les cat√©gories au montage du composant
  useEffect(() => {
    fetchCategories();
  }, []);

  /**
   * @description Filtre les programmes par cat√©gorie
   * 
   * @param {string} categorieId - Identifiant de la cat√©gorie √† filtrer
   * @returns {ProgrammeFormation[]} Liste des programmes appartenant √† la cat√©gorie
   * 
   * @example
   * // R√©cup√©rer les programmes de la cat√©gorie "D√©veloppement Web"
   * const programmesDevWeb = getProgrammesByCategorie("cat-dev-web");
   */
  const getProgrammesByCategorie = (categorieId: string) => {
    return programmes.filter(prog => prog.categorieId === categorieId);
  };

  /**
   * @description Filtre les programmes par type (catalogue ou sur-mesure)
   * 
   * @param {"catalogue" | "sur-mesure"} type - Type de programme √† filtrer
   * @returns {ProgrammeFormation[]} Liste des programmes du type sp√©cifi√©
   * 
   * @example
   * // R√©cup√©rer tous les programmes catalogue
   * const programmesCatalogue = getProgrammesByType("catalogue");
   * 
   * @example
   * // R√©cup√©rer tous les programmes sur-mesure
   * const programmesSurMesure = getProgrammesByType("sur-mesure");
   */
  const getProgrammesByType = (type: "catalogue" | "sur-mesure") => {
    return programmes.filter(prog => prog.type === type);
  };

  /**
   * @description Duplique un programme existant avec des modifications (par ex: de catalogue vers sur-mesure)
   * @note Cette fonction tente d'abord d'utiliser un endpoint sp√©cifique de duplication, puis recourt √† une cr√©ation standard en cas d'√©chec
   * 
   * @param {string} id - Identifiant du programme source √† dupliquer
   * @param {Partial<ProgrammeFormation>} modificationData - Modifications √† appliquer √† la copie
   * @returns {Promise<ProgrammeFormation>} Le programme dupliqu√©
   * @throws {Error} Si la duplication √©choue ou si le programme source n'est pas trouv√©
   * 
   * @example
   * // Dupliquer un programme catalogue en version sur-mesure
   * const programmeSurMesure = await duplicateProgramme("prog-catalogue-123", {
   *   type: "sur-mesure",
   *   titre: "Formation DevOps Personnalis√©e - Client ABC",
   *   beneficiaireId: "client-123",
   *   objectifsSpecifiques: "Objectifs adapt√©s au client ABC"
   * });
   */
  const duplicateProgramme = async (id: string, modificationData: Partial<ProgrammeFormation>) => {
    try {
      console.log('duplicateProgramme appel√© avec id:', id, 'et modifications:', modificationData);
      
      // R√©cup√©rer le programme source
      const sourceProgramme = programmes.find(p => p.id === id);
      if (!sourceProgramme) {
        console.error('Programme source introuvable avec id:', id);
        throw new Error('Programme source introuvable');
      }
      console.log('Programme source trouv√©:', sourceProgramme);

      // V√©rifier s'il s'agit d'une duplication vers sur-mesure
      const isSurMesureConversion = 
        (sourceProgramme.type === 'catalogue' && modificationData.type === 'sur-mesure');
      
      // Extraire le chemin du template HTML source si disponible
      const sourceTemplatePath = sourceProgramme.programmeUrl;
      
      // Cr√©er un nouveau programme bas√© sur le programme source avec les modifications
      const duplicateData = {
        ...sourceProgramme,
        ...modificationData,
        id: undefined // Le backend va g√©n√©rer un nouvel ID
      };
      console.log('Donn√©es pour duplication pr√©par√©es:', duplicateData);

      // Essayons d'abord une approche alternative si l'API originale √©choue
      let response;
      try {
        // Approche 1: Endpoint sp√©cifique de duplication
        console.log('Tentative d\'appel API 1: /api/programmes-formation/duplicate');
        response = await api.post('/api/programmes-formation/duplicate', { 
          sourceId: id,
          newData: duplicateData
        });
      } catch (dupError) {
        console.warn('Premi√®re tentative √©chou√©e, essai avec cr√©ation standard...', dupError);
        
        // Approche 2: Cr√©er un nouveau programme avec les donn√©es dupliqu√©es
        console.log('Tentative d\'appel API 2: /api/programmes-formation (cr√©ation standard)');
        const newProgrammeData = {
          ...duplicateData,
          id: undefined,
          createdAt: undefined,
          updatedAt: undefined
        };
        response = await api.post('/api/programmes-formation', newProgrammeData);
      }

      const duplicatedProgramme = response.data;
      console.log('Programme dupliqu√© avec succ√®s:', duplicatedProgramme);
      
      // Si c'est une conversion vers sur-mesure et qu'il y a un template source, archiver le template
      if (isSurMesureConversion && sourceTemplatePath) {
        try {
          console.log('Archivage du template HTML:', sourceTemplatePath);
          // Appel √† l'API d'archivage
          const archiveResponse = await api.post('/api/programmes-html/archive', {
            sourcePath: sourceTemplatePath,
            programmeId: duplicatedProgramme.id,
            programmeTitle: duplicatedProgramme.titre
          });
          
          if (archiveResponse.data.success) {
            console.log('Template archiv√© avec succ√®s:', archiveResponse.data.archivedPath);
            // Mettre √† jour l'URL du programme avec le chemin archiv√©
            if (archiveResponse.data.archivedPath) {
              await updateProgramme(duplicatedProgramme.id, {
                programmeUrl: archiveResponse.data.archivedPath
              });
              duplicatedProgramme.programmeUrl = archiveResponse.data.archivedPath;
            }
          }
        } catch (archiveError) {
          console.error('Erreur lors de l\'archivage du template:', archiveError);
          // On continue malgr√© l'erreur d'archivage, mais on log l'erreur
        }
      }
      
      setProgrammes(prev => [duplicatedProgramme, ...prev]);

      toast({
        title: 'Programme dupliqu√©',
        description: `Programme "${duplicatedProgramme.titre}" cr√©√© avec succ√®s`,
      });

      return duplicatedProgramme;
    } catch (error) {
      console.error('Erreur lors de la duplication:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de dupliquer le programme',
        variant: 'destructive',
      });
      throw error;
    }
  };

  /**
   * @description Met √† jour le statut d'activation d'un programme (actif/inactif)
   * @note Cette fonction tente d'utiliser un endpoint d√©di√© au statut, puis recourt √† une mise √† jour standard en cas d'√©chec
   * 
   * @param {string} id - Identifiant du programme √† modifier
   * @param {{ estActif: boolean }} options - Options avec le statut d'activation
   * @param {boolean} options.estActif - Nouveau statut d'activation (true = actif, false = inactif)
   * @returns {Promise<ProgrammeFormation>} Le programme mis √† jour
   * @throws {Error} Si la mise √† jour du statut √©choue
   * 
   * @example
   * // Activer un programme
   * await updateProgrammeStatus("prog-123", { estActif: true });
   * 
   * @example
   * // D√©sactiver un programme
   * await updateProgrammeStatus("prog-456", { estActif: false });
   */
  const updateProgrammeStatus = async (id: string, { estActif }: { estActif: boolean }) => {
    console.log('updateProgrammeStatus appel√© avec id:', id, 'estActif:', estActif);
    try {
      // R√©cup√©rer le programme pour les logs
      const programme = programmes.find(p => p.id === id);
      console.log('Programme trouv√© pour mise √† jour de statut:', programme);
      
      // Essayer plusieurs approches en cas d'√©chec
      let response;
      try {
        // Approche 1: Endpoint d√©di√© au statut
        console.log('Tentative API 1: PATCH /api/programmes-formation/:id/status');
        response = await api.patch(`/api/programmes-formation/${id}/status`, { estActif });
      } catch (statusError) {
        console.warn('Premi√®re tentative √©chou√©e, essai avec mise √† jour standard...', statusError);
        
        // Approche 2: Update standard
        console.log('Tentative API 2: PUT /api/programmes-formation/:id (update standard)');
        response = await api.put(`/api/programmes-formation/${id}`, { estActif });
      }
      
      const updated = response.data;
      console.log('Programme mis √† jour avec succ√®s:', updated);
      
      // Mettre √† jour l'√©tat local avant la notification
      setProgrammes(prev => prev.map(p => (p.id === id ? updated : p)));
      console.log('Liste des programmes mise √† jour');
      
      toast({
        title: estActif ? 'Programme activ√©' : 'Programme d√©sactiv√©',
        description: `Le statut du programme a √©t√© mis √† jour`,
      });
      
      return updated;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du statut:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de mettre √† jour le statut du programme',
        variant: 'destructive',
      });
      throw error;
    }
  };

  return {
    programmes,
    loading,
    createProgramme,
    updateProgramme,
    deleteProgramme,
    duplicateProgramme,
    updateProgrammeStatus,
    categories,
    loadingCategories,
    getProgrammesByCategorie,
    getProgrammesByType,
    refreshProgrammes: fetchProgrammes
  };
};

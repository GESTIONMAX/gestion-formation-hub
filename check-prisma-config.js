const fs = require('fs');

// V√©rifiez les sch√©mas multiples
const prismaFiles = fs.readdirSync('./prisma').filter(f => f.endsWith('.prisma'));
if (prismaFiles.length > 1) {
  console.warn('‚ö†Ô∏è  Multiple Prisma schemas detected:', prismaFiles);
} else {
  console.log('‚úÖ Un seul sch√©ma Prisma trouv√©:', prismaFiles[0]);
}

// V√©rifiez les migrations orphelines
const migrations = fs.readdirSync('./prisma/migrations');
const dupMigrations = migrations.filter(m => m.includes('duplicate'));
if (dupMigrations.length) {
  console.warn('‚ö†Ô∏è  Migrations orphelines trouv√©es:', dupMigrations);
} else {
  console.log('‚úÖ Aucune migration orpheline d√©tect√©e');
}

// V√©rifiez la pr√©sence du mod√®le Formation
try {
  const schemaContent = fs.readFileSync('./prisma/schema.prisma', 'utf-8');
  if (schemaContent.includes('model Formation {')) {
    console.log('‚úÖ Le mod√®le Formation est pr√©sent dans le sch√©ma');
  } else {
    console.warn('‚ö†Ô∏è  Le mod√®le Formation n\'est pas trouv√© dans le sch√©ma');
  }
} catch (error) {
  console.error('Erreur lors de la lecture du sch√©ma:', error);
}

// V√©rifiez la coh√©rence des fichiers g√©n√©r√©s
if (fs.existsSync('./node_modules/.prisma/client/index.d.ts')) {
  const clientTypes = fs.readFileSync('./node_modules/.prisma/client/index.d.ts', 'utf-8');
  if (clientTypes.includes('formation: Prisma.FormationDelegate')) {
    console.log('‚úÖ Le mod√®le Formation est correctement expos√© dans le client Prisma g√©n√©r√©');
  } else {
    console.warn('‚ö†Ô∏è  Le mod√®le Formation n\'est pas correctement expos√© dans le client Prisma');
  }
} else {
  console.warn('‚ö†Ô∏è  Fichier de types Prisma client non trouv√©, ex√©cutez npx prisma generate');
}

console.log('\nüîç V√©rification termin√©e');
